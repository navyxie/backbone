// Generated by CoffeeScript 1.6.2
(function() {
  var $, _ref;

  if ((_ref = window.YS) == null) {
    window.YS = {};
  }

  $ = window.jQuery;

  YS.SellItem = YS.BaseItem.extend({
    defaults: {
      price: 1,
      count: 1,
      auxiliaryCount: '',
      priceTotal: ''
    },
    initialize: function() {
      this.changeCount(this, this.get('count'));
      this.changePrice(this, this.get('price'));
      this.on('change:count', this.changeCount);
      return this.on('change:price', this.changePrice);
    },
    changeCount: function(model, value) {
      var auxiliaryCount, oldValue, packTotal, price, unitRelation, unitTotal;

      unitRelation = model.get('unitRelation');
      oldValue = value;
      value = window.parseInt(value);
      if (_.isNaN(value)) {
        value = model.previous('count');
      }
      if (oldValue !== value) {
        model.set('count', value);
        return;
      }
      price = model.get('price');
      packTotal = Math.floor(value / unitRelation);
      unitTotal = value % unitRelation;
      auxiliaryCount = '';
      if (packTotal) {
        auxiliaryCount = "" + packTotal + (model.get('auxiliaryUnit'));
      }
      if (unitTotal) {
        auxiliaryCount += "" + unitTotal + (model.get('unit'));
      }
      model.set('auxiliaryCount', auxiliaryCount);
      if (price) {
        this.changePrice(model, price);
      }
      return this;
    },
    changePrice: function(model, value) {
      var count, oldValue;

      oldValue = value;
      value = window.parseFloat(value);
      if (_.isNaN(value)) {
        value = model.previous('price');
      }
      if (oldValue !== value) {
        model.set('price', value);
        return;
      }
      count = model.get('count');
      if (count) {
        model.set('priceTotal', (count * value).toFixed(2));
      }
      return this;
    }
  });

  YS.SellItemList = Backbone.Collection.extend({
    model: YS.SellItem
  });

  YS.SellItemListView = YS.ItemListView.extend({
    template: _.template('<tr class="item <%= className %>">' + '<td class="op"><a class="remove" href="javascript:;" title="从表格删除该项"> </a></td>' + '<td class="name"><%= name %></td>' + '<td class="barcode"><%= barcode %></td>' + '<td class="size"><%= size %></td>' + '<td class="count"><input type="text" placeholder="商品购买数量" data-key="count" value=<%= count %> class="userInput" /></td>' + '<td class="auxiliaryCount"><%= auxiliaryCount %></td>' + '<td class="price"><input type="text" placeholder="商品购买单价" data-key="price" value=<%= price %> class="userInput" /></td>' + '<td class="priceTotal"><%= priceTotal %></td>' + '</tr>'),
    events: {
      'dblclick .showSelectList': 'showSelectList',
      'focus input.userInput': 'userInputFocus',
      'blur input.userInput': 'userInputBlur',
      'change input.userInput': 'userInputChange',
      'click .remove': 'removeClick',
      'keyup .showSelectList': 'showSelectListKeyup'
    },
    initialize: function() {
      this.$el.addClass('sellItemTable itemTable');
      this.model.bind('add', this.render, this);
      return this.render();
    },
    userInputFocus: function(e) {
      var obj;

      obj = $(e.currentTarget);
      obj.data('prevValue', obj.val());
      obj.val('');
      return this;
    },
    userInputBlur: function(e) {
      var obj;

      obj = $(e.currentTarget);
      if (!obj.val()) {
        obj.val(obj.data('prevValue'));
      }
      return this;
    },
    userInputChange: function(e) {
      var data, index, key, obj, trObj;

      obj = $(e.currentTarget);
      trObj = obj.closest('tr');
      index = trObj.index();
      key = obj.attr('data-key');
      data = {};
      data[key] = obj.val();
      this.async(data, index);
      return this;
    },
    removeClick: function(e) {
      var index, obj;

      obj = $(e.currentTarget);
      index = obj.closest('tr').index();
      this.remove(index);
      return this;
    },
    showSelectListKeyup: function(e) {
      if (e.keyCode === 0x0d) {
        this.showSelectList();
      }
      return this;
    },
    showSelectList: function() {
      this.options.showSelectList(this.$el.find('.showSelectList').val());
      return this;
    },
    add: function(data) {
      if (data) {
        this.model.add(data);
      }
      return this;
    },
    update: function() {
      var i, item, itemObj, itemObjs, model, _i, _ref1;

      model = this.model;
      itemObjs = this.$el.find('.item');
      for (i = _i = 0, _ref1 = model.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        itemObj = itemObjs.eq(i);
        item = model.at(i);
        itemObj.find('.price').val(item.get('price'));
        itemObj.find('.count').val(item.get('count'));
        itemObj.find('.auxiliaryCount').text(item.get('auxiliaryCount'));
        itemObj.find('.priceTotal').text(item.get('priceTotal'));
      }
      return this;
    },
    render: function() {
      var ctrlHtml, getPriceTotal, items, othersHtml, priceTotal, priceTotalHtml, self, tableHtml;

      self = this;
      getPriceTotal = function(priceTotalList) {
        return _.reduce(priceTotalList, function(memo, priceTotal) {
          return memo + window.parseFloat(priceTotal);
        }, 0);
      };
      items = this.model.toJSON();
      tableHtml = this.getTableHtml();
      priceTotal = getPriceTotal(_.pluck(items, 'priceTotal'));
      ctrlHtml = '<div class="ctrls"><input class="showSelectList" placeholder="显示商品列表" /></div>';
      priceTotalHtml = "<div class='priceTotal'>总价：<span>" + priceTotal + "</span>元</div>";
      othersHtml = "<div class='othersInfo'>" + ctrlHtml + priceTotalHtml + "</div>";
      this.$el.html("" + tableHtml + othersHtml);
      return this;
    }
  });

}).call(this);
